# -*- mode: ruby -*-
# vi: set ft=ruby :

# Global variables - ssh key and a box that should be used for the servers
ssh_key                     = "~/.ssh/id_rsa"
box                         = "centos/7"

# Define servers details.
# Mandatory variables:
# - hostname
# - ip (possible arguments - static ip or dhcp - "10.10.10.10"/"dhcp")
# Optional variables, could be set to override the defaults for specific box:
# - ram (default: 512)
# - cpu (default: 1)
# - box (default: defined above)
# - port_guest and port_host (port forwarding - not defined by default)
# - folder_guest and folder_host (synced folders - not defined by default)
servers = [
  { :hostname => "server1", :ip => "10.10.10.10", :ram => 1024, :cpu => 2, :group => "servers" },
  { :hostname => "client1", :ip => "10.10.10.11", :box => "ubuntu/xenial64", :group => "clients" },
  { :hostname => "client2", :ip => "10.10.10.12", :group => "clients", :port_guest => 80, :port_host => 8080 },
  { :hostname => "client3", :ip => "dhcp", :group => "clients", :folder_guest => "/srv/website", :folder_host => "src/" }
]

# Defined ansible playbook
# If empty, will skip the ansible provisioner block
ansible_playbook = "playbook.yml"

Vagrant.configure(2) do |config|
  # Use of the hostmanager plugin to update the host and guest /etc/hosts file.
  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = false

    # Resolve dynamic ip address (dhcp) of the host and guests for the /etc/hosts file.
    # https://github.com/devopsgroup-io/vagrant-hostmanager/issues/86
    servers.each do |server|
      if server[:ip] == "dhcp"
        cached_addresses = {}
        config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
          if cached_addresses[vm.name].nil?
            if hostname = (vm.ssh_info && vm.ssh_info[:host])
              vm.communicate.execute("hostname -I | cut -d ' ' -f 2") do |type, contents|
                cached_addresses[vm.name] = contents.split("\n").first[/(\d+\.\d+\.\d+\.\d+)/, 1]
              end
            end
          end
          cached_addresses[vm.name]
        end
      end
    end
  end

  # Create groups to be used in ansible inventory
  groups = {"all" => []}
  servers.each do |cfg|
    if ! groups.has_key?(cfg[:group])
      groups[cfg[:group]] = [cfg[:hostname]]
    else
      groups[cfg[:group]].push(cfg[:hostname])
    end
    groups["all"].push(cfg[:hostname])
  end

  # Loop and create each server from the servers array above.
  servers.each_with_index do |server, index|
    # Check if custom box is defined for specific server within the servers array.
    # If not applies the default (box=ubuntu/xenial64).
    box_image = server[:box] ? server[:box] : box;
    config.vm.define server[:hostname] do |conf|
      conf.vm.box = box_image.to_s
      conf.vm.hostname = server[:hostname]

      # Set network options (static/dhcp) according to the provided by the user.
      net_config = {}
      if server[:ip] != "dhcp"
        net_config[:ip] = server[:ip]
        net_config[:netmask] = server[:netmask] || "255.255.255.0"
      else
        net_config[:type] = "dhcp"
      end
      conf.vm.network "private_network", net_config

      # Set port forwarding if defined
      if !server[:port_guest].nil? && !server[:port_host].nil?
        conf.vm.network "forwarded_port", guest: server[:port_guest], host: server[:port_host]
      end

      # Set synced folders if defined
      if !server[:folder_guest].nil? && !server[:folder_host].nil?
        conf.vm.synced_folder server[:folder_host], server[:folder_guest]
      end

      # Checks for the custom cpu and/or ram defined for a specific server.
      # If not applies the default (cpu=1, ram=512).
      cpu = server[:cpu] ? server[:cpu] : 1;
      memory = server[:ram] ? server[:ram] : 512;
      config.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--cpus", cpu.to_s]
        vb.customize ["modifyvm", :id, "--memory", memory.to_s]
      end

      # Takes the ssh key provided above and copying the public key to the server.
      config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", ssh_key]
      config.ssh.insert_key = false
      config.vm.provision "file", source: ssh_key + ".pub", destination: "~/.ssh/authorized_keys"

      # The ubuntu/xenial64 box is missing python. Install it for ansible provision.
      if box_image == "ubuntu/xenial64"
        config.vm.provision "shell" do |s|
          s.inline = "test -e /usr/bin/python || (apt-get -qqy update && apt-get install -qqy python-minimal)"
        end
      end

      # Provision nodes with Ansible.
      # The index used here in order to execute the provision just after all
      # the servers are up and running.
      if index == servers.size - 1
        if ansible_playbook != ""
          config.vm.provision :ansible do |ansible|
            ansible.verbose = "v"
            ansible.limit = "all"
            ansible.groups = groups
            ansible.playbook = ansible_playbook
          end
        end
      end
    end
  end
end
