# -*- mode: ruby -*-
# vi: set ft=ruby :

# Global variables - ssh key and a box that should be used for the servers
ssh_key                     = "~/.ssh/id_rsa"
box                         = "centos/7"

# Define servers details.
# Mandatory variables:
# - hostname
# - ip
# Optional variables, could be set to override the defaults for specific box:
# - ram (default: 512)
# - cpu (default: 1)
# - box (default: defined above)
servers = [
  { :hostname => "server1", :ip => "10.10.10.10", :ram => 1024, :cpu => 2, :group => "servers" },
  { :hostname => "client1", :ip => "10.10.10.11", :box => "ubuntu/xenial64", :group => "clients" },
  { :hostname => "client2", :ip => "10.10.10.12", :group => "clients" }
]

# Ansible playbook to provision
# If empty, will skip the ansible provisioner block
ansible_playbook = "playbook.yml"
# Ansible inventory. The path supports nested directories or a single file
ansible_inventory_path = "inventory/hosts"
ansible_user = "vagrant"

Vagrant.configure(2) do |config|
  # Use of the hostmanager plugin to update the host and guest /etc/hosts file.
  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = false
  end

  # Create inventory for ansible provision
  # The inventory will hold servers details and groups per each server.
  if File.dirname(ansible_inventory_path) != "."
    Dir.mkdir(File.dirname(ansible_inventory_path)) unless Dir.exist?(File.dirname(ansible_inventory_path))
  end
  File.open(ansible_inventory_path, 'w') do |f|
    servers.each do |cfg|
      # Breaking a long line
      f.write "#{cfg[:hostname]} ansible_host=#{cfg[:ip]} "
      f.write "ansible_user=#{ansible_user} ansible_ssh_private_key_file=#{ssh_key}\n"
    end
    f.write "\n"
    f.write "[all]\n"
    servers.each do |cfg|
      f.write "#{cfg[:hostname]}\n"
    end
    f.write "\n"
    servers.each do |cfg|
      f.write "[#{cfg[:group]}]\n"
      f.write "#{cfg[:hostname]}\n"
      f.write "\n"
    end
  end

  # Loop each server from the servers array above.
  servers.each_with_index do |server, index|
    # Check if custom box is defined for specific server within the servers array.
    # If not applies the default (box=ubuntu/xenial64).
    box_image = server[:box] ? server[:box] : box;
    config.vm.define server[:hostname] do |conf|
      conf.vm.box = box_image.to_s
      conf.vm.hostname = server[:hostname]
      conf.vm.network "private_network", ip: server[:ip]

      # Checks for the custom cpu and/or ram defined for a specific server.
      # If not applies the default (cpu=1, ram=512).
      cpu = server[:cpu] ? server[:cpu] : 1;
      memory = server[:ram] ? server[:ram] : 512;
      config.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--cpus", cpu.to_s]
        vb.customize ["modifyvm", :id, "--memory", memory.to_s]
      end

      # Takes the ssh key provided above and copying the public key to the server.
      config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", ssh_key]
      config.ssh.insert_key = false
      config.vm.provision "file", source: ssh_key + ".pub", destination: "~/.ssh/authorized_keys"

      # The ubuntu/xenial64 box is missing python. Install it for ansible provision.
      if box == "ubuntu/xenial64"
        config.vm.provision "shell" do |s|
          s.inline = "test -e /usr/bin/python || (apt-get -qqy update && apt-get install -qqy python-minimal)"
        end
      end

      # Provision nodes with Ansible.
      # The index used here in order to execute the provision just after all
      # the servers are up and running.
      if index == servers.size - 1
        if ansible_playbook != ""
          config.vm.provision :ansible do |ansible|
            ansible.inventory_path = ansible_inventory_path
            ansible.verbose = "v"
            ansible.limit = "all"
            ansible.playbook = ansible_playbook
          end
        end
      end
    end
  end
end
